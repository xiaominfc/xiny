// Code generated by protoc-gen-go. DO NOT EDIT.
// source: IM.File.proto

/*
Package IM_File is a generated protocol buffer package.

It is generated from these files:
	IM.File.proto

It has these top-level messages:
	IMFileLoginReq
	IMFileLoginRsp
	IMFileState
	IMFilePullDataReq
	IMFilePullDataRsp
	IMFileReq
	IMFileRsp
	IMFileNotify
	IMFileHasOfflineReq
	IMFileHasOfflineRsp
	IMFileAddOfflineReq
	IMFileDelOfflineReq
*/
package IM_File

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import IM_BaseDefine "github.com/xiaominfc/xiny/pb/IM_BaseDefine"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IMFileLoginReq struct {
	// cmd id:	0x0501
	UserId           *uint32                       `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	TaskId           *string                       `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	FileRole         *IM_BaseDefine.ClientFileRole `protobuf:"varint,3,req,name=file_role,json=fileRole,enum=IM.BaseDefine.ClientFileRole" json:"file_role,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *IMFileLoginReq) Reset()                    { *m = IMFileLoginReq{} }
func (m *IMFileLoginReq) String() string            { return proto.CompactTextString(m) }
func (*IMFileLoginReq) ProtoMessage()               {}
func (*IMFileLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IMFileLoginReq) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *IMFileLoginReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *IMFileLoginReq) GetFileRole() IM_BaseDefine.ClientFileRole {
	if m != nil && m.FileRole != nil {
		return *m.FileRole
	}
	return IM_BaseDefine.ClientFileRole_CLIENT_REALTIME_SENDER
}

type IMFileLoginRsp struct {
	// cmd id:	0x0502
	ResultCode       *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	TaskId           *string `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IMFileLoginRsp) Reset()                    { *m = IMFileLoginRsp{} }
func (m *IMFileLoginRsp) String() string            { return proto.CompactTextString(m) }
func (*IMFileLoginRsp) ProtoMessage()               {}
func (*IMFileLoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IMFileLoginRsp) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *IMFileLoginRsp) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

type IMFileState struct {
	// cmd id: 	0x0503
	State            *IM_BaseDefine.ClientFileState `protobuf:"varint,1,req,name=state,enum=IM.BaseDefine.ClientFileState" json:"state,omitempty"`
	TaskId           *string                        `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	UserId           *uint32                        `protobuf:"varint,3,req,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *IMFileState) Reset()                    { *m = IMFileState{} }
func (m *IMFileState) String() string            { return proto.CompactTextString(m) }
func (*IMFileState) ProtoMessage()               {}
func (*IMFileState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IMFileState) GetState() IM_BaseDefine.ClientFileState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return IM_BaseDefine.ClientFileState_CLIENT_FILE_PEER_READY
}

func (m *IMFileState) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *IMFileState) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

type IMFilePullDataReq struct {
	// cmd id:	0x0504
	TaskId           *string                         `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	UserId           *uint32                         `protobuf:"varint,2,req,name=user_id,json=userId" json:"user_id,omitempty"`
	TransMode        *IM_BaseDefine.TransferFileType `protobuf:"varint,3,req,name=trans_mode,json=transMode,enum=IM.BaseDefine.TransferFileType" json:"trans_mode,omitempty"`
	Offset           *uint32                         `protobuf:"varint,4,req,name=offset" json:"offset,omitempty"`
	DataSize         *uint32                         `protobuf:"varint,5,req,name=data_size,json=dataSize" json:"data_size,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *IMFilePullDataReq) Reset()                    { *m = IMFilePullDataReq{} }
func (m *IMFilePullDataReq) String() string            { return proto.CompactTextString(m) }
func (*IMFilePullDataReq) ProtoMessage()               {}
func (*IMFilePullDataReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IMFilePullDataReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *IMFilePullDataReq) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *IMFilePullDataReq) GetTransMode() IM_BaseDefine.TransferFileType {
	if m != nil && m.TransMode != nil {
		return *m.TransMode
	}
	return IM_BaseDefine.TransferFileType_FILE_TYPE_ONLINE
}

func (m *IMFilePullDataReq) GetOffset() uint32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *IMFilePullDataReq) GetDataSize() uint32 {
	if m != nil && m.DataSize != nil {
		return *m.DataSize
	}
	return 0
}

type IMFilePullDataRsp struct {
	// cmd id: 	0x0505
	ResultCode       *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	TaskId           *string `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	UserId           *uint32 `protobuf:"varint,3,req,name=user_id,json=userId" json:"user_id,omitempty"`
	Offset           *uint32 `protobuf:"varint,4,req,name=offset" json:"offset,omitempty"`
	FileData         []byte  `protobuf:"bytes,5,req,name=file_data,json=fileData" json:"file_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IMFilePullDataRsp) Reset()                    { *m = IMFilePullDataRsp{} }
func (m *IMFilePullDataRsp) String() string            { return proto.CompactTextString(m) }
func (*IMFilePullDataRsp) ProtoMessage()               {}
func (*IMFilePullDataRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IMFilePullDataRsp) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *IMFilePullDataRsp) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *IMFilePullDataRsp) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *IMFilePullDataRsp) GetOffset() uint32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *IMFilePullDataRsp) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

type IMFileReq struct {
	// cmd id: 	0x0506
	FromUserId       *uint32                         `protobuf:"varint,1,req,name=from_user_id,json=fromUserId" json:"from_user_id,omitempty"`
	ToUserId         *uint32                         `protobuf:"varint,2,req,name=to_user_id,json=toUserId" json:"to_user_id,omitempty"`
	FileName         *string                         `protobuf:"bytes,3,req,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileSize         *uint32                         `protobuf:"varint,4,req,name=file_size,json=fileSize" json:"file_size,omitempty"`
	TransMode        *IM_BaseDefine.TransferFileType `protobuf:"varint,5,req,name=trans_mode,json=transMode,enum=IM.BaseDefine.TransferFileType" json:"trans_mode,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *IMFileReq) Reset()                    { *m = IMFileReq{} }
func (m *IMFileReq) String() string            { return proto.CompactTextString(m) }
func (*IMFileReq) ProtoMessage()               {}
func (*IMFileReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IMFileReq) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *IMFileReq) GetToUserId() uint32 {
	if m != nil && m.ToUserId != nil {
		return *m.ToUserId
	}
	return 0
}

func (m *IMFileReq) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *IMFileReq) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *IMFileReq) GetTransMode() IM_BaseDefine.TransferFileType {
	if m != nil && m.TransMode != nil {
		return *m.TransMode
	}
	return IM_BaseDefine.TransferFileType_FILE_TYPE_ONLINE
}

type IMFileRsp struct {
	// cmd id: 	0x0507
	ResultCode       *uint32                         `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	FromUserId       *uint32                         `protobuf:"varint,2,req,name=from_user_id,json=fromUserId" json:"from_user_id,omitempty"`
	ToUserId         *uint32                         `protobuf:"varint,3,req,name=to_user_id,json=toUserId" json:"to_user_id,omitempty"`
	FileName         *string                         `protobuf:"bytes,4,req,name=file_name,json=fileName" json:"file_name,omitempty"`
	TaskId           *string                         `protobuf:"bytes,5,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	IpAddrList       []*IM_BaseDefine.IpAddr         `protobuf:"bytes,6,rep,name=ip_addr_list,json=ipAddrList" json:"ip_addr_list,omitempty"`
	TransMode        *IM_BaseDefine.TransferFileType `protobuf:"varint,7,req,name=trans_mode,json=transMode,enum=IM.BaseDefine.TransferFileType" json:"trans_mode,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *IMFileRsp) Reset()                    { *m = IMFileRsp{} }
func (m *IMFileRsp) String() string            { return proto.CompactTextString(m) }
func (*IMFileRsp) ProtoMessage()               {}
func (*IMFileRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IMFileRsp) GetResultCode() uint32 {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return 0
}

func (m *IMFileRsp) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *IMFileRsp) GetToUserId() uint32 {
	if m != nil && m.ToUserId != nil {
		return *m.ToUserId
	}
	return 0
}

func (m *IMFileRsp) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *IMFileRsp) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *IMFileRsp) GetIpAddrList() []*IM_BaseDefine.IpAddr {
	if m != nil {
		return m.IpAddrList
	}
	return nil
}

func (m *IMFileRsp) GetTransMode() IM_BaseDefine.TransferFileType {
	if m != nil && m.TransMode != nil {
		return *m.TransMode
	}
	return IM_BaseDefine.TransferFileType_FILE_TYPE_ONLINE
}

type IMFileNotify struct {
	// cmd id: 	0x0508
	FromUserId       *uint32                         `protobuf:"varint,1,req,name=from_user_id,json=fromUserId" json:"from_user_id,omitempty"`
	ToUserId         *uint32                         `protobuf:"varint,2,req,name=to_user_id,json=toUserId" json:"to_user_id,omitempty"`
	FileName         *string                         `protobuf:"bytes,3,req,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileSize         *uint32                         `protobuf:"varint,4,req,name=file_size,json=fileSize" json:"file_size,omitempty"`
	TaskId           *string                         `protobuf:"bytes,5,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	IpAddrList       []*IM_BaseDefine.IpAddr         `protobuf:"bytes,6,rep,name=ip_addr_list,json=ipAddrList" json:"ip_addr_list,omitempty"`
	TransMode        *IM_BaseDefine.TransferFileType `protobuf:"varint,7,req,name=trans_mode,json=transMode,enum=IM.BaseDefine.TransferFileType" json:"trans_mode,omitempty"`
	OfflineReady     *uint32                         `protobuf:"varint,8,req,name=offline_ready,json=offlineReady" json:"offline_ready,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *IMFileNotify) Reset()                    { *m = IMFileNotify{} }
func (m *IMFileNotify) String() string            { return proto.CompactTextString(m) }
func (*IMFileNotify) ProtoMessage()               {}
func (*IMFileNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IMFileNotify) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *IMFileNotify) GetToUserId() uint32 {
	if m != nil && m.ToUserId != nil {
		return *m.ToUserId
	}
	return 0
}

func (m *IMFileNotify) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *IMFileNotify) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

func (m *IMFileNotify) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *IMFileNotify) GetIpAddrList() []*IM_BaseDefine.IpAddr {
	if m != nil {
		return m.IpAddrList
	}
	return nil
}

func (m *IMFileNotify) GetTransMode() IM_BaseDefine.TransferFileType {
	if m != nil && m.TransMode != nil {
		return *m.TransMode
	}
	return IM_BaseDefine.TransferFileType_FILE_TYPE_ONLINE
}

func (m *IMFileNotify) GetOfflineReady() uint32 {
	if m != nil && m.OfflineReady != nil {
		return *m.OfflineReady
	}
	return 0
}

type IMFileHasOfflineReq struct {
	// cmd id: 	0x0509
	UserId           *uint32 `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	AttachData       []byte  `protobuf:"bytes,20,opt,name=attach_data,json=attachData" json:"attach_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IMFileHasOfflineReq) Reset()                    { *m = IMFileHasOfflineReq{} }
func (m *IMFileHasOfflineReq) String() string            { return proto.CompactTextString(m) }
func (*IMFileHasOfflineReq) ProtoMessage()               {}
func (*IMFileHasOfflineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IMFileHasOfflineReq) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *IMFileHasOfflineReq) GetAttachData() []byte {
	if m != nil {
		return m.AttachData
	}
	return nil
}

type IMFileHasOfflineRsp struct {
	// cmd id:	0x050a
	UserId           *uint32                          `protobuf:"varint,1,req,name=user_id,json=userId" json:"user_id,omitempty"`
	OfflineFileList  []*IM_BaseDefine.OfflineFileInfo `protobuf:"bytes,2,rep,name=offline_file_list,json=offlineFileList" json:"offline_file_list,omitempty"`
	IpAddrList       []*IM_BaseDefine.IpAddr          `protobuf:"bytes,3,rep,name=ip_addr_list,json=ipAddrList" json:"ip_addr_list,omitempty"`
	AttachData       []byte                           `protobuf:"bytes,20,opt,name=attach_data,json=attachData" json:"attach_data,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *IMFileHasOfflineRsp) Reset()                    { *m = IMFileHasOfflineRsp{} }
func (m *IMFileHasOfflineRsp) String() string            { return proto.CompactTextString(m) }
func (*IMFileHasOfflineRsp) ProtoMessage()               {}
func (*IMFileHasOfflineRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IMFileHasOfflineRsp) GetUserId() uint32 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *IMFileHasOfflineRsp) GetOfflineFileList() []*IM_BaseDefine.OfflineFileInfo {
	if m != nil {
		return m.OfflineFileList
	}
	return nil
}

func (m *IMFileHasOfflineRsp) GetIpAddrList() []*IM_BaseDefine.IpAddr {
	if m != nil {
		return m.IpAddrList
	}
	return nil
}

func (m *IMFileHasOfflineRsp) GetAttachData() []byte {
	if m != nil {
		return m.AttachData
	}
	return nil
}

type IMFileAddOfflineReq struct {
	// cmd id:	0x050b
	FromUserId       *uint32 `protobuf:"varint,1,req,name=from_user_id,json=fromUserId" json:"from_user_id,omitempty"`
	ToUserId         *uint32 `protobuf:"varint,2,req,name=to_user_id,json=toUserId" json:"to_user_id,omitempty"`
	TaskId           *string `protobuf:"bytes,3,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	FileName         *string `protobuf:"bytes,4,req,name=file_name,json=fileName" json:"file_name,omitempty"`
	FileSize         *uint32 `protobuf:"varint,5,req,name=file_size,json=fileSize" json:"file_size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IMFileAddOfflineReq) Reset()                    { *m = IMFileAddOfflineReq{} }
func (m *IMFileAddOfflineReq) String() string            { return proto.CompactTextString(m) }
func (*IMFileAddOfflineReq) ProtoMessage()               {}
func (*IMFileAddOfflineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IMFileAddOfflineReq) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *IMFileAddOfflineReq) GetToUserId() uint32 {
	if m != nil && m.ToUserId != nil {
		return *m.ToUserId
	}
	return 0
}

func (m *IMFileAddOfflineReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *IMFileAddOfflineReq) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *IMFileAddOfflineReq) GetFileSize() uint32 {
	if m != nil && m.FileSize != nil {
		return *m.FileSize
	}
	return 0
}

type IMFileDelOfflineReq struct {
	// cmd id:	0x050c
	FromUserId       *uint32 `protobuf:"varint,1,req,name=from_user_id,json=fromUserId" json:"from_user_id,omitempty"`
	ToUserId         *uint32 `protobuf:"varint,2,req,name=to_user_id,json=toUserId" json:"to_user_id,omitempty"`
	TaskId           *string `protobuf:"bytes,3,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IMFileDelOfflineReq) Reset()                    { *m = IMFileDelOfflineReq{} }
func (m *IMFileDelOfflineReq) String() string            { return proto.CompactTextString(m) }
func (*IMFileDelOfflineReq) ProtoMessage()               {}
func (*IMFileDelOfflineReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IMFileDelOfflineReq) GetFromUserId() uint32 {
	if m != nil && m.FromUserId != nil {
		return *m.FromUserId
	}
	return 0
}

func (m *IMFileDelOfflineReq) GetToUserId() uint32 {
	if m != nil && m.ToUserId != nil {
		return *m.ToUserId
	}
	return 0
}

func (m *IMFileDelOfflineReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func init() {
	proto.RegisterType((*IMFileLoginReq)(nil), "IM.File.IMFileLoginReq")
	proto.RegisterType((*IMFileLoginRsp)(nil), "IM.File.IMFileLoginRsp")
	proto.RegisterType((*IMFileState)(nil), "IM.File.IMFileState")
	proto.RegisterType((*IMFilePullDataReq)(nil), "IM.File.IMFilePullDataReq")
	proto.RegisterType((*IMFilePullDataRsp)(nil), "IM.File.IMFilePullDataRsp")
	proto.RegisterType((*IMFileReq)(nil), "IM.File.IMFileReq")
	proto.RegisterType((*IMFileRsp)(nil), "IM.File.IMFileRsp")
	proto.RegisterType((*IMFileNotify)(nil), "IM.File.IMFileNotify")
	proto.RegisterType((*IMFileHasOfflineReq)(nil), "IM.File.IMFileHasOfflineReq")
	proto.RegisterType((*IMFileHasOfflineRsp)(nil), "IM.File.IMFileHasOfflineRsp")
	proto.RegisterType((*IMFileAddOfflineReq)(nil), "IM.File.IMFileAddOfflineReq")
	proto.RegisterType((*IMFileDelOfflineReq)(nil), "IM.File.IMFileDelOfflineReq")
}

func init() { proto.RegisterFile("IM.File.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xdf, 0x4e, 0xd4, 0x40,
	0x14, 0xc6, 0xb3, 0x2d, 0xbb, 0xec, 0x9e, 0x5d, 0x30, 0x14, 0x95, 0x46, 0x54, 0x9a, 0x7a, 0xb3,
	0x57, 0xbd, 0x20, 0x26, 0x26, 0x5e, 0x98, 0xf0, 0x27, 0x86, 0x12, 0x16, 0x4c, 0xc1, 0xeb, 0x66,
	0x64, 0x66, 0x70, 0xb4, 0xed, 0xd4, 0xce, 0xf4, 0x02, 0x2e, 0x7c, 0x11, 0x5e, 0xc0, 0x67, 0xf0,
	0xc6, 0x2b, 0xdf, 0xc0, 0x07, 0x32, 0x33, 0xd3, 0xc5, 0x6d, 0xb5, 0x0b, 0x84, 0x44, 0xbd, 0xa2,
	0x73, 0x4e, 0x39, 0xe7, 0xfb, 0x7e, 0xe7, 0x4c, 0xb3, 0xb0, 0x14, 0x4e, 0x82, 0xd7, 0x2c, 0x21,
	0x41, 0x5e, 0x70, 0xc9, 0x9d, 0xc5, 0xea, 0xf8, 0x68, 0x35, 0x9c, 0x04, 0xdb, 0x48, 0x90, 0x5d,
	0x42, 0x59, 0x56, 0x65, 0xfd, 0xcf, 0xb0, 0x1c, 0x4e, 0x54, 0xfa, 0x80, 0x9f, 0xb1, 0x2c, 0x22,
	0x9f, 0x9c, 0x35, 0x58, 0x2c, 0x05, 0x29, 0x62, 0x86, 0xdd, 0x8e, 0x67, 0x8d, 0x97, 0xa2, 0x9e,
	0x3a, 0x86, 0x58, 0x25, 0x24, 0x12, 0x1f, 0x55, 0xc2, 0xf2, 0xac, 0xf1, 0x20, 0xea, 0xa9, 0x63,
	0x88, 0x9d, 0x97, 0x30, 0xa0, 0x2c, 0x21, 0x71, 0xc1, 0x13, 0xe2, 0xda, 0x9e, 0x35, 0x5e, 0xde,
	0x7c, 0x12, 0xd4, 0x9b, 0xed, 0x24, 0x8c, 0x64, 0x52, 0xf5, 0x89, 0x78, 0x42, 0xa2, 0x3e, 0xad,
	0x9e, 0xfc, 0xfd, 0x7a, 0x7f, 0x91, 0x3b, 0x1b, 0x30, 0x2c, 0x88, 0x28, 0x13, 0x19, 0x9f, 0x72,
	0x4c, 0x2a, 0x0d, 0x60, 0x42, 0x3b, 0x1c, 0x93, 0x56, 0x1d, 0x7e, 0x09, 0x43, 0x53, 0xeb, 0x58,
	0x22, 0x49, 0x9c, 0xe7, 0xd0, 0x15, 0xea, 0x41, 0x97, 0x58, 0xde, 0x7c, 0xda, 0x2a, 0x49, 0xbf,
	0x1e, 0x99, 0x97, 0xdb, 0x5d, 0xce, 0x70, 0xb1, 0x67, 0xb9, 0xf8, 0x5f, 0x3b, 0xb0, 0x62, 0xfa,
	0xbe, 0x29, 0x93, 0x64, 0x17, 0x49, 0x54, 0x61, 0x9c, 0xd6, 0xe9, 0xb4, 0xd5, 0xb1, 0x6a, 0x7c,
	0x5f, 0x01, 0xc8, 0x02, 0x65, 0x22, 0x4e, 0x95, 0x6f, 0xc3, 0x71, 0xa3, 0x21, 0xfa, 0x44, 0xbd,
	0x40, 0x49, 0xa1, 0xba, 0x9d, 0x9c, 0xe7, 0x24, 0x1a, 0xe8, 0x7f, 0x99, 0x28, 0x2e, 0x0f, 0xa1,
	0xc7, 0x29, 0x15, 0x44, 0xba, 0x0b, 0xa6, 0xae, 0x39, 0x39, 0xeb, 0x30, 0xc0, 0x48, 0xa2, 0x58,
	0xb0, 0x0b, 0xe2, 0x76, 0x75, 0xaa, 0xaf, 0x02, 0xc7, 0xec, 0x82, 0xf8, 0x97, 0xbf, 0x8b, 0xbf,
	0xcb, 0x0c, 0x5a, 0x29, 0xcd, 0x53, 0xa7, 0x97, 0x47, 0x29, 0xd2, 0xea, 0x46, 0x66, 0x3b, 0x94,
	0x14, 0xff, 0x7b, 0x07, 0x06, 0x46, 0x9d, 0x42, 0xea, 0xc1, 0x88, 0x16, 0x3c, 0x8d, 0xeb, 0xeb,
	0x09, 0x2a, 0xf6, 0xd6, 0x34, 0x79, 0x0c, 0x20, 0x79, 0x5c, 0xc7, 0xdb, 0x97, 0xbc, 0xca, 0x4e,
	0x5b, 0x65, 0x28, 0x35, 0x7c, 0x07, 0xa6, 0xd5, 0x21, 0x4a, 0xc9, 0x55, 0x52, 0x53, 0x32, 0x12,
	0x75, 0x52, 0x51, 0x6a, 0x8c, 0xa6, 0x7b, 0xdb, 0xd1, 0xf8, 0x97, 0xd6, 0x95, 0x8f, 0x9b, 0xd0,
	0x6d, 0x1a, 0xb5, 0xae, 0x31, 0x6a, 0xcf, 0x33, 0xba, 0xd0, 0x30, 0x3a, 0x33, 0xba, 0x6e, 0x6d,
	0x74, 0x2f, 0x60, 0xc4, 0xf2, 0x18, 0x61, 0x5c, 0xc4, 0x09, 0x13, 0xd2, 0xed, 0x79, 0xf6, 0x78,
	0xb8, 0xf9, 0xa0, 0x61, 0x33, 0xcc, 0xb7, 0x30, 0x2e, 0x22, 0x60, 0xfa, 0xef, 0x01, 0x13, 0xb2,
	0x41, 0x67, 0xf1, 0xd6, 0x74, 0xbe, 0x59, 0x30, 0x32, 0x74, 0x0e, 0xb9, 0x64, 0xf4, 0xfc, 0x1f,
	0x0e, 0xfa, 0xbf, 0x83, 0xe3, 0x3c, 0x83, 0x25, 0x4e, 0x69, 0xc2, 0x32, 0x12, 0x17, 0x04, 0xe1,
	0x73, 0xb7, 0xaf, 0x25, 0x8f, 0xaa, 0x60, 0xa4, 0x62, 0xfe, 0x11, 0xac, 0x1a, 0x80, 0x7b, 0x48,
	0x1c, 0x4d, 0x13, 0x73, 0x3e, 0xe5, 0x1b, 0x30, 0x44, 0x52, 0xa2, 0xd3, 0xf7, 0xe6, 0xda, 0xdd,
	0xf7, 0x3a, 0xe3, 0x51, 0x04, 0x26, 0xa4, 0x2f, 0xde, 0x8f, 0xce, 0x1f, 0x2a, 0x8a, 0xbc, 0xbd,
	0xe2, 0x3e, 0xac, 0x4c, 0x65, 0x6a, 0xba, 0x1a, 0x92, 0xa5, 0x21, 0x35, 0x3f, 0xbc, 0x55, 0x39,
	0x55, 0x3c, 0xcc, 0x28, 0x8f, 0xee, 0xf1, 0x5f, 0x01, 0x8d, 0xac, 0xc9, 0xda, 0xbe, 0x29, 0xeb,
	0x6b, 0x6d, 0x7d, 0xb9, 0xb2, 0xb5, 0x85, 0xf1, 0x0c, 0xa8, 0xbb, 0x2e, 0xdc, 0xcc, 0xda, 0xd8,
	0xb5, 0xb5, 0x99, 0x7b, 0x13, 0x6b, 0x9b, 0xd8, 0xad, 0x6f, 0xa2, 0x9f, 0x4d, 0x95, 0xee, 0x92,
	0xe4, 0x2f, 0x28, 0xdd, 0x5e, 0x87, 0xb5, 0x53, 0x9e, 0x06, 0x29, 0x3f, 0x2b, 0x3f, 0x30, 0x12,
	0x48, 0x69, 0x7e, 0x20, 0xbc, 0x2b, 0xe9, 0x9e, 0xfd, 0x33, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xd3,
	0x0b, 0xaa, 0x53, 0x08, 0x00, 0x00,
}
